sucrose char lvl=90/90 cons=6 talent=9,9,9;
sucrose add weapon="hakushinring" refine=5 lvl=90/90;
sucrose add set="viridescentvenerer" count=5;
sucrose add stats def%=0.124 def=39.36 hp=5287.88 hp%=0.0992 atk=344.08 atk%=0.0992 er=0.6612 em=679.92 cr=0.1986 cd=0.2648;

keqing char lvl=90/90 cons=0 talent=9,9,9;
keqing add weapon="harbingerofdawn" refine=5 lvl=90/90;
keqing add set="thunderingfury" count=5;
keqing add stats def%=0.124 def=39.36 hp=5287.88 hp%=0.0992 atk=344.08 atk%=0.6644 er=0.1102 em=39.64 cr=0.3972 cd=1.284 electro%=0.466;

fischl char lvl=90/90 cons=6 talent=9,9,9;
fischl add weapon="thestringless" refine=3 lvl=90/90;
fischl add set="goldentroupe" count=4;
fischl add stats def%=0.124 def=39.36 hp=5287.88 hp%=0.0992 atk=344.08 atk%=0.5652 er=0.1102 em=79.28 cr=0.642 cd=0.7944 electro%=0.466;

kirara char lvl=90/90 cons=6 talent=9,9,9;
kirara add weapon="favoniussword" refine=3 lvl=90/90;
kirara add set="instructor" count=4;
kirara add stats hp=3571 atk=232 hp%=0.3495 dendro%=0.466 cr=0.23325 ; #main
kirara add stats def=31.488 def%=0.0992 hp=406.304 hp%=0.07936 atk=26.464 atk%=0.07936 er=0.63916 em=31.712 cr=0.05296 cd=0.10592;
			
options swap_delay=1 iteration=500;
target lvl=100 resist=0.1 radius=2 pos=0,2.4 hp=999999999;
energy every interval=480,720 amount=1;

let stddev = 3;
let mean = 12;

# Normally distributed delay with specified stddev and mean.
fn rand_delay() {
  let del = randnorm() * stddev + mean;
  delay(del);
}

active fischl;

for let r = 0; r < 4; r = r + 1 { # End sim after 4 rotations.
  fischl attack:2, burst;
  
  rand_delay(); # Random delay before swap helps prevent volatile results based on fixed frame timings.
  kirara swap;
  kirara skill, attack, burst;
  
  rand_delay();
  sucrose swap;
  sucrose attack;
  while !.element.t0.electro { # Just helps improve some unlucky iterations.
    sucrose attack;
  }
  sucrose skill, dash, burst;
  
  rand_delay();
  keqing swap;
  keqing skill, burst, skill, 
    attack, charge, 
    attack, charge, 
    attack, skill,
    attack, charge,
    attack, charge;
  
  rand_delay();
  fischl swap;
  fischl skill, attack;
  
  rand_delay();
  kirara swap;
  kirara skill, attack;
  
  rand_delay();
  sucrose swap;
  while !.element.t0.electro {
    sucrose attack;
  }
  sucrose skill, dash, attack:3; # Normal attacks are filler, doesn't really matter.
  
  rand_delay();
  keqing swap;
  keqing skill, burst, skill, 
    attack, charge, 
    attack, charge, 
    attack, skill,
    attack, charge,
    attack, charge;
  
  if r < 3 { # Last rotation doesn't need to swap back to Fischl.
    rand_delay();
    fischl swap;
  }
}

# 1st half --- Fischl Q > Kirara EQ N1 > Sucrose (N1) ED Q > Keqing EQE 2N1C N1E 2N1C
# 2nd half --- Fischl E N1 > Kirara E N1 > Sucrose (N1) ED N3 > Keqing EQE 2N1C N1E 2N1C

# If you are worried about messing up VV, just swirl before Kirara, not a big deal.